{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotEnoughETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__WithdrawalFailed",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9ee1d570a27fca56611150204fd3e6294f381510444b26f1ac1915fb122d2c72",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1052783",
    "logsBloom": "0x
    "blockHash": "0x65981ea9bc0a486032b6e2a4465395d7a02c5517106d9a526f0003c14e61b466",
    "transactionHash": "0x9ee1d570a27fca56611150204fd3e6294f381510444b26f1ac1915fb122d2c72",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1052783",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "c06ba3e50af4d9ac3c4e02933473d981",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__WithdrawalFailed\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Guy Robbe\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"cheaperWithdraw()\":{\"details\":\"It uses a local memory array for iterating, thus it consumes less gas.\"},\"constructor\":{\"details\":\"The constructor sets the price feed address and the contract owner\",\"params\":{\"_priceFeed\":\"The address of the price feed contract\"}},\"getAddressToAmountFunded(address)\":{\"params\":{\"funder\":\"The address of the funder\"},\"returns\":{\"_0\":\"The amount funded by the address\"}},\"getFunder(uint256)\":{\"params\":{\"index\":\"The index of the funder\"},\"returns\":{\"_0\":\"The address of the funder\"}},\"getOwner()\":{\"returns\":{\"_0\":\"The address of the contract owner\"}},\"getPriceFeed()\":{\"returns\":{\"_0\":\"The price feed contract\"}},\"getVersion()\":{\"returns\":{\"_0\":\"The version of the price feed contract\"}},\"withdraw()\":{\"details\":\"Resets all funder's balances to zero.\"}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cheaperWithdraw()\":{\"notice\":\"A cheaper variant of the 'withdraw' function.\"},\"fund()\":{\"notice\":\"Funds the contract and checks if the funding amount is sufficient based on ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Returns the amount of funds a specific address has provided\"},\"getFunder(uint256)\":{\"notice\":\"Returns the funder address at a specific index\"},\"getOwner()\":{\"notice\":\"Returns the address of the contract owner\"},\"getPriceFeed()\":{\"notice\":\"Returns the price feed contract\"},\"getVersion()\":{\"notice\":\"Returns the version of the price feed contract\"},\"withdraw()\":{\"notice\":\"Allows the contract owner to withdraw all funds.\"}},\"notice\":\"This contract is for creating a sample crowd funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// Custom error to be thrown if someone other than the contract owner tries to call a function.\\nerror FundMe__NotOwner();\\n// Custom error to be thrown if someone sends less than the minimum usd established.\\nerror FundMe__NotEnoughETH();\\n// Custom error to be thrown if withdrawal doesn't succeed.\\nerror FundMe__WithdrawalFailed();\\n\\n/**\\n * @title A sample Funding Contract\\n * @author Guy Robbe\\n * @notice This contract is for creating a sample crowd funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n  // Using the PriceConverter library for uint256 type\\n  using PriceConverter for uint256;\\n\\n  // A public constant to represent the minimum USD amount needed for funding\\n  uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n  // Private state variable to hold the owner's address\\n  address private immutable i_owner;\\n\\n  // An array to hold the addresses of all funders\\n  address[] private s_funders;\\n\\n  // A mapping to keep track of the amount of funding an address has provided\\n  mapping(address => uint256) private s_addressToAmountFunded;\\n\\n  // Instance of the AggregatorV3Interface to interact with the price feed\\n  AggregatorV3Interface private s_priceFeed;\\n\\n  // Modifier to restrict access to the contract owner\\n  modifier onlyOwner() {\\n    if (msg.sender != i_owner) revert FundMe__NotOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @dev The constructor sets the price feed address and the contract owner\\n   * @param _priceFeed The address of the price feed contract\\n   */\\n  constructor(address _priceFeed) {\\n    s_priceFeed = AggregatorV3Interface(_priceFeed);\\n    i_owner = msg.sender;\\n  }\\n\\n  /**\\n   * @notice The receive function is a fallback that is called when the contract is sent Ether (without data).\\n   * @dev It simply calls the fund() function.\\n   */\\n  receive() external payable {\\n    fund();\\n  }\\n\\n  /**\\n   * @notice The fallback function is called when the contract is called without a function signature\\n   * (i.e., someone just sent Ether) or for function calls that do not match an existing function.\\n   * @dev It simply calls the fund() function.\\n   */\\n  fallback() external payable {\\n    fund();\\n  }\\n\\n  /**\\n   * @notice Funds the contract and checks if the funding amount is sufficient based on ETH/USD price\\n   */\\n  function fund() public payable {\\n    uint256 minimumUSD = msg.value.getConversionRate(s_priceFeed);\\n    if (minimumUSD < MINIMUM_USD) revert FundMe__NotEnoughETH();\\n\\n    s_addressToAmountFunded[msg.sender] += msg.value;\\n    s_funders.push(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Allows the contract owner to withdraw all funds.\\n   * @dev Resets all funder's balances to zero.\\n   */\\n  function withdraw() public onlyOwner {\\n    for (\\n      uint256 funderIndex = 0;\\n      funderIndex < s_funders.length;\\n      funderIndex++\\n    ) {\\n      s_addressToAmountFunded[s_funders[funderIndex]] = 0;\\n    }\\n    s_funders = new address[](0);\\n\\n    (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n    if (!success) revert FundMe__WithdrawalFailed();\\n  }\\n\\n  /**\\n   * @notice A cheaper variant of the 'withdraw' function.\\n   * @dev It uses a local memory array for iterating, thus it consumes less gas.\\n   */\\n  function cheaperWithdraw() public onlyOwner {\\n    address[] memory _funders = s_funders;\\n\\n    for (\\n      uint256 funderIndex = 0;\\n      funderIndex < _funders.length;\\n      funderIndex++\\n    ) {\\n      s_addressToAmountFunded[_funders[funderIndex]] = 0;\\n    }\\n    s_funders = new address[](0);\\n\\n    (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n    if (!success) revert FundMe__WithdrawalFailed();\\n  }\\n\\n  /**\\n   * @notice Returns the amount of funds a specific address has provided\\n   * @param funder The address of the funder\\n   * @return The amount funded by the address\\n   */\\n  function getAddressToAmountFunded(\\n    address funder\\n  ) public view returns (uint256) {\\n    return s_addressToAmountFunded[funder];\\n  }\\n\\n  /**\\n   * @notice Returns the version of the price feed contract\\n   * @return The version of the price feed contract\\n   */\\n  function getVersion() public view returns (uint256) {\\n    return s_priceFeed.version();\\n  }\\n\\n  /**\\n   * @notice Returns the funder address at a specific index\\n   * @param index The index of the funder\\n   * @return The address of the funder\\n   */\\n  function getFunder(uint256 index) public view returns (address) {\\n    return s_funders[index];\\n  }\\n\\n  /**\\n   * @notice Returns the address of the contract owner\\n   * @return The address of the contract owner\\n   */\\n  function getOwner() public view returns (address) {\\n    return i_owner;\\n  }\\n\\n  /**\\n   * @notice Returns the price feed contract\\n   * @return The price feed contract\\n   */\\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\\n    return s_priceFeed;\\n  }\\n}\\n\",\"keccak256\":\"0xc74ad9ecd1a1f8b51b89b04703af7644b4f4a18827045308a0f1c1a28ba27500\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title Price Converter Library\\n * @author Guy Robbe\\n * @notice This library is used to convert the ETH amount to its equivalent USD amount.\\n * @dev The library uses the Chainlink price feed Aggregator interface to get the latest ETH price and calculate the conversion.\\n */\\nlibrary PriceConverter {\\n  /**\\n   * @notice Gets the latest ETH price from a price feed\\n   * @dev The function makes use of the latestRoundData function of the AggregatorV3Interface.\\n   * @param _priceFeed The price feed to get data from\\n   * @return The latest ETH price (in USD, with an additional 10 decimal places)\\n   */\\n  function getPrice(\\n    AggregatorV3Interface _priceFeed\\n  ) internal view returns (uint256) {\\n    (, int256 answer, , , ) = _priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  /**\\n   * @notice Gets the conversion rate for a specific ETH amount to its USD equivalent\\n   * @dev The function uses the getPrice function to get the latest ETH price and then calculates the equivalent USD amount for the provided ETH amount.\\n   * @param _ethAmount The amount of ETH to convert\\n   * @param _priceFeed The price feed to get data from\\n   * @return The equivalent USD amount for the given ETH amount\\n   */\\n  function getConversionRate(\\n    uint256 _ethAmount,\\n    AggregatorV3Interface _priceFeed\\n  ) internal view returns (uint256) {\\n    uint256 ethPrice = getPrice(_priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * _ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0xc99212e65dd2f0ab7ea46fbad3533daf46b0173779caa4625447b5c835189572\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610bc1565b610339565b6040516100d79190610d5e565b60405180910390f35b3480156100ec57600080fd5b506100f5610382565b6040516101029190610d5e565b60405180910390f35b34801561011757600080fd5b50610120610429565b005b34801561012e57600080fd5b5061013761067a565b6040516101449190610d5e565b60405180910390f35b34801561015957600080fd5b50610162610687565b60405161016f9190610d28565b60405180910390f35b34801561018457600080fd5b5061018d6106af565b60405161019a9190610d43565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c26106d9565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610bee565b61098e565b6040516101f89190610d28565b60405180910390f35b6000610238600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109d590919063ffffffff16565b90506802b5e3af16b188000081101561027d576040517fb514e4ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cc9190610d84565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ec57600080fd5b505afa158015610400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104249190610c1b565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ae576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600080549050811015610553576000600160008084815481106104d7576104d66110b5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061054b9061100e565b9150506104b1565b50600067ffffffffffffffff81111561056f5761056e6110e4565b5b60405190808252806020026020018201604052801561059d5781602001602082028036833780820191505090505b50600090805190602001906105b3929190610ab1565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516105fa90610d13565b60006040518083038185875af1925050503d8060008114610637576040519150601f19603f3d011682016040523d82523d6000602084013e61063c565b606091505b5050905080610677576040517f26faa65e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461075e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107e157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610797575b5050505050905060005b81518110156108665760006001600084848151811061080d5761080c6110b5565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061085e9061100e565b9150506107eb565b50600067ffffffffffffffff811115610882576108816110e4565b5b6040519080825280602002602001820160405280156108b05781602001602082028036833780820191505090505b50600090805190602001906108c6929190610ab1565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161090d90610d13565b60006040518083038185875af1925050503d806000811461094a576040519150601f19603f3d011682016040523d82523d6000602084013e61094f565b606091505b505090508061098a576040517f26faa65e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60008082815481106109a3576109a26110b5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109e183610a11565b90506000670de0b6b3a764000085836109fa9190610f22565b610a049190610dda565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a5a57600080fd5b505afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190610c48565b5050509150506402540be40081610aa99190610e0b565b915050919050565b828054828255906000526020600020908101928215610b2a579160200282015b82811115610b295782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ad1565b5b509050610b379190610b3b565b5090565b5b80821115610b54576000816000905550600101610b3c565b5090565b600081359050610b678161111b565b92915050565b600081519050610b7c81611132565b92915050565b600081359050610b9181611149565b92915050565b600081519050610ba681611149565b92915050565b600081519050610bbb81611160565b92915050565b600060208284031215610bd757610bd6611113565b5b6000610be584828501610b58565b91505092915050565b600060208284031215610c0457610c03611113565b5b6000610c1284828501610b82565b91505092915050565b600060208284031215610c3157610c30611113565b5b6000610c3f84828501610b97565b91505092915050565b600080600080600060a08688031215610c6457610c63611113565b5b6000610c7288828901610bac565b9550506020610c8388828901610b6d565b9450506040610c9488828901610b97565b9350506060610ca588828901610b97565b9250506080610cb688828901610bac565b9150509295509295909350565b610ccc81610f7c565b82525050565b610cdb81610fd8565b82525050565b6000610cee600083610d79565b9150610cf982611118565b600082019050919050565b610d0d81610fb8565b82525050565b6000610d1e82610ce1565b9150819050919050565b6000602082019050610d3d6000830184610cc3565b92915050565b6000602082019050610d586000830184610cd2565b92915050565b6000602082019050610d736000830184610d04565b92915050565b600081905092915050565b6000610d8f82610fb8565b9150610d9a83610fb8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dcf57610dce611057565b5b828201905092915050565b6000610de582610fb8565b9150610df083610fb8565b925082610e0057610dff611086565b5b828204905092915050565b6000610e1682610f8e565b9150610e2183610f8e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e6057610e5f611057565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e9d57610e9c611057565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610eda57610ed9611057565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f1757610f16611057565b5b828202905092915050565b6000610f2d82610fb8565b9150610f3883610fb8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f7157610f70611057565b5b828202905092915050565b6000610f8782610f98565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610fe382610fea565b9050919050565b6000610ff582610ffc565b9050919050565b600061100782610f98565b9050919050565b600061101982610fb8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561104c5761104b611057565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b50565b61112481610f7c565b811461112f57600080fd5b50565b61113b81610f8e565b811461114657600080fd5b50565b61115281610fb8565b811461115d57600080fd5b50565b61116981610fc2565b811461117457600080fd5b5056fea2646970667358221220b1bcb8926d5fbc17df15800a7afc4ca657f61f82be33b262fe8d83af82732a1264736f6c63430008070033",
  "devdoc": {
    "author": "Guy Robbe",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "cheaperWithdraw()": {
        "details": "It uses a local memory array for iterating, thus it consumes less gas."
      },
      "constructor": {
        "details": "The constructor sets the price feed address and the contract owner",
        "params": {
          "_priceFeed": "The address of the price feed contract"
        }
      },
      "getAddressToAmountFunded(address)": {
        "params": {
          "funder": "The address of the funder"
        },
        "returns": {
          "_0": "The amount funded by the address"
        }
      },
      "getFunder(uint256)": {
        "params": {
          "index": "The index of the funder"
        },
        "returns": {
          "_0": "The address of the funder"
        }
      },
      "getOwner()": {
        "returns": {
          "_0": "The address of the contract owner"
        }
      },
      "getPriceFeed()": {
        "returns": {
          "_0": "The price feed contract"
        }
      },
      "getVersion()": {
        "returns": {
          "_0": "The version of the price feed contract"
        }
      },
      "withdraw()": {
        "details": "Resets all funder's balances to zero."
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cheaperWithdraw()": {
        "notice": "A cheaper variant of the 'withdraw' function."
      },
      "fund()": {
        "notice": "Funds the contract and checks if the funding amount is sufficient based on ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Returns the amount of funds a specific address has provided"
      },
      "getFunder(uint256)": {
        "notice": "Returns the funder address at a specific index"
      },
      "getOwner()": {
        "notice": "Returns the address of the contract owner"
      },
      "getPriceFeed()": {
        "notice": "Returns the price feed contract"
      },
      "getVersion()": {
        "notice": "Returns the version of the price feed contract"
      },
      "withdraw()": {
        "notice": "Allows the contract owner to withdraw all funds."
      }
    },
    "notice": "This contract is for creating a sample crowd funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 75,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 78,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}