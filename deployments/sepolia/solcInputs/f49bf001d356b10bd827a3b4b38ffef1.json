{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(\n    uint80 _roundId,\n    int256 _answer,\n    uint256 _timestamp,\n    uint256 _startedAt\n  ) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n// Custom error to be thrown if someone other than the contract owner tries to call a function.\nerror FundMe__NotOwner();\n\n/**\n * @title A sample Funding Contract\n * @author Guy Robbe\n * @notice This contract is for creating a sample crowd funding contract\n * @dev This implements price feeds as our library\n */\ncontract FundMe {\n  // Using the PriceConverter library for uint256 type\n  using PriceConverter for uint256;\n\n  // A public constant to represent the minimum USD amount needed for funding\n  uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\n\n  // Private state variable to hold the owner's address\n  address private immutable s_owner;\n\n  // An array to hold the addresses of all funders\n  address[] private s_funders;\n\n  // A mapping to keep track of the amount of funding an address has provided\n  mapping(address => uint256) private s_addressToAmountFunded;\n\n  // Instance of the AggregatorV3Interface to interact with the price feed\n  AggregatorV3Interface private s_priceFeed;\n\n  // Modifier to restrict access to the contract owner\n  modifier onlyOwner() {\n    if (msg.sender != s_owner) revert FundMe__NotOwner();\n    _;\n  }\n\n  /**\n   * @dev The constructor sets the price feed address and the contract owner\n   * @param _priceFeed The address of the price feed contract\n   */\n  constructor(address _priceFeed) {\n    s_priceFeed = AggregatorV3Interface(_priceFeed);\n    s_owner = msg.sender;\n  }\n\n  /**\n   * @notice Funds the contract and checks if the funding amount is sufficient based on ETH/USD price\n   */\n  function fund() public payable {\n    uint256 minimumUSD = msg.value.getConversionRate(s_priceFeed);\n    require(minimumUSD >= MINIMUM_USD, \"You need to spend more ETH!\");\n\n    s_addressToAmountFunded[msg.sender] += msg.value;\n    s_funders.push(msg.sender);\n  }\n\n  /**\n   * @notice Allows the contract owner to withdraw all funds.\n   * @dev Resets all funder's balances to zero.\n   */\n  function withdraw() public onlyOwner {\n    for (\n      uint256 funderIndex = 0;\n      funderIndex < s_funders.length;\n      funderIndex++\n    ) {\n      s_addressToAmountFunded[s_funders[funderIndex]] = 0;\n    }\n    s_funders = new address[](0);\n\n    (bool success, ) = s_owner.call{value: address(this).balance}(\"\");\n    require(success, \"Withdrawal failed.\");\n  }\n\n  /**\n   * @notice A cheaper variant of the 'withdraw' function.\n   * @dev It uses a local memory array for iterating, thus it consumes less gas.\n   */\n  function cheaperWithdraw() public onlyOwner {\n    address[] memory _funders = s_funders;\n\n    for (\n      uint256 funderIndex = 0;\n      funderIndex < _funders.length;\n      funderIndex++\n    ) {\n      s_addressToAmountFunded[_funders[funderIndex]] = 0;\n    }\n    s_funders = new address[](0);\n\n    (bool success, ) = s_owner.call{value: address(this).balance}(\"\");\n    require(success, \"Withdrawal failed.\");\n  }\n\n  /**\n   * @notice Returns the amount of funds a specific address has provided\n   * @param funder The address of the funder\n   * @return The amount funded by the address\n   */\n  function getAddressToAmountFunded(\n    address funder\n  ) public view returns (uint256) {\n    return s_addressToAmountFunded[funder];\n  }\n\n  /**\n   * @notice Returns the version of the price feed contract\n   * @return The version of the price feed contract\n   */\n  function getVersion() public view returns (uint256) {\n    return s_priceFeed.version();\n  }\n\n  /**\n   * @notice Returns the funder address at a specific index\n   * @param index The index of the funder\n   * @return The address of the funder\n   */\n  function getFunder(uint256 index) public view returns (address) {\n    return s_funders[index];\n  }\n\n  /**\n   * @notice Returns the address of the contract owner\n   * @return The address of the contract owner\n   */\n  function getOwner() public view returns (address) {\n    return s_owner;\n  }\n\n  /**\n   * @notice Returns the price feed contract\n   * @return The price feed contract\n   */\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\n    return s_priceFeed;\n  }\n}\n"
    },
    "contracts/mocks/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n/**\n * @title Price Converter Library\n * @author Guy Robbe\n * @notice This library is used to convert the ETH amount to its equivalent USD amount.\n * @dev The library uses the Chainlink price feed Aggregator interface to get the latest ETH price and calculate the conversion.\n */\nlibrary PriceConverter {\n  /**\n   * @notice Gets the latest ETH price from a price feed\n   * @dev The function makes use of the latestRoundData function of the AggregatorV3Interface.\n   * @param _priceFeed The price feed to get data from\n   * @return The latest ETH price (in USD, with an additional 10 decimal places)\n   */\n  function getPrice(\n    AggregatorV3Interface _priceFeed\n  ) internal view returns (uint256) {\n    (, int256 answer, , , ) = _priceFeed.latestRoundData();\n    // ETH/USD rate in 18 digit\n    return uint256(answer * 10000000000);\n  }\n\n  /**\n   * @notice Gets the conversion rate for a specific ETH amount to its USD equivalent\n   * @dev The function uses the getPrice function to get the latest ETH price and then calculates the equivalent USD amount for the provided ETH amount.\n   * @param _ethAmount The amount of ETH to convert\n   * @param _priceFeed The price feed to get data from\n   * @return The equivalent USD amount for the given ETH amount\n   */\n  function getConversionRate(\n    uint256 _ethAmount,\n    AggregatorV3Interface _priceFeed\n  ) internal view returns (uint256) {\n    uint256 ethPrice = getPrice(_priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * _ethAmount) / 1000000000000000000;\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\n    return ethAmountInUsd;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}